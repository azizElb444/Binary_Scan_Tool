#!/usr/bin/env python3

import sys
import os
import subprocess
import shutil
import argparse

def run_command(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    output, error = process.communicate()
    return output.decode('utf-8'), error.decode('utf-8'), process.returncode

def clamscan(target_file):
    print("[+] Running ClamAV scan...")
    clamscan_output, _, _ = run_command(f"clamscan {target_file} --gen-json=no")
    if "Infected files: 1" in clamscan_output:
        print("[!] Malware detected!!!")
    else:
        print("[+] No malware detected by ClamAV.")

def scan_executable(target_file):
    print("[+] Decompiling the executable ...")

    decompiled_file_dir = "decompiled_file_dir"
    current_directory = "./"
    full_decompiled_path = os.path.join(current_directory, decompiled_file_dir)
    os.makedirs(full_decompiled_path, exist_ok=True)

    # ghidra project directory path , need to be changed as your conviniences
    ghidra_project_dir = "/home/aziz/Azizooo/Internship_project/vulnerable_C"
    # ghidra project name
    ghidra_project_name = "my_ghidra_first_project"
    # ghidra headless cli with Haruspex.java file to decompile
    ghidra_command = f"/usr/share/ghidra/support/analyzeHeadless {ghidra_project_dir} {ghidra_project_name} -import {target_file} -scriptPath ./ghidra_script -postscript Haruspex.java {full_decompiled_path}"
    
    with open('trash_output.txt', 'w') as f:
    	subprocess.run(ghidra_command, shell=True, stdout=f, stderr=subprocess.STDOUT)

    if not os.listdir(full_decompiled_path):
        print("[!] Error occurred while decompiling!")
        print("[!] Make sure to delete the exec file from ghidra project in ghidra GUI")
        return

    print(f"[+] Decompiling completed. Pseudo-code saved in {full_decompiled_path}")
    semgrep_command = f"semgrep --config ./malicious_rule_c.yml {full_decompiled_path} --json-output=./malware-scan.json"
    subprocess.run(semgrep_command, shell=True)
    
    print("[+] Scan completed. Results saved in malware-scan.json")
    os.remove('trash_output.txt')
    

def scan_jar(target_file):
    print("[+] Decompiling the JAR file ...")

    decompiled_file_dir = "decompiled_jar2"
    current_directory = "./"
    full_decompiled_path = os.path.join(current_directory, decompiled_file_dir)
    os.makedirs(full_decompiled_path, exist_ok=True)
    
    # make sure to change with jd-cli.jar absolute
    jd_cli_command = f"java -jar /home/aziz/Azizooo/Internship_project/malware_scan_tool/jar_files_scan/jd-cli.jar -od {full_decompiled_path} {target_file}"
    
    with open('trash_output.txt', 'w') as f:
        subprocess.run(jd_cli_command, shell=True, stdout=f, stderr=subprocess.STDOUT)

    if not os.listdir(full_decompiled_path):
        print("[!] Error occurred while decompiling!")
        return

    print(f"[+] Decompiling completed. Pseudo-code saved in {full_decompiled_path}")
    semgrep_command = f"semgrep --config ./malicious_java_rule.yml {full_decompiled_path} --json-output=./malware-scan.json"
    subprocess.run(semgrep_command, shell=True)
    
    print("[+] Scan completed. Results saved in malware-scan.json")

    os.remove('trash_output.txt')

def main():
    parser = argparse.ArgumentParser(
        description="Malware Scanner for Executables and JAR files",
        epilog="Example usage:\n"
               "python3  %(prog)s -exec executable\n"
               "python3  %(prog)s -jar jarfile.jar",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-exec', '--executable', help='Scan a C executable file')
    group.add_argument('-jar', '--jar', help='Scan a JAR/WAR file')
    
    args = parser.parse_args()

    if args.executable:
        target_file = args.executable
        print(f"[+] Scanning executable: {target_file}")
        clamscan(target_file)
        print(f"[+] Running Static analysis on the code of the executable : {target_file}")
        scan_executable(target_file)
    elif args.jar:
        target_file = args.jar
        print(f"[+] Scanning JAR file: {target_file}")
        clamscan(target_file)
        print(f"[+] Running Static analysis on the code of the JAR\WAR file : {target_file}")
        scan_jar(target_file)

if __name__ == "__main__":
    main()
